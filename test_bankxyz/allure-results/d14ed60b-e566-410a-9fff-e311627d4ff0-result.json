{"name": "test_successful_open_account_potter[edge]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Account created successfully with account Number :1016\nMessage: unexpected alert open: {Alert text : Account created successfully with account Number :1016}\n  (Session info: MicrosoftEdge=123.0.2420.81)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7A058B7F2+63538]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7A050F672+238306]\n\t(No symbol) [0x00007FF7A0343407]\n\t(No symbol) [0x00007FF7A03C2373]\n\t(No symbol) [0x00007FF7A03A8A83]\n\t(No symbol) [0x00007FF7A037E55E]\n\t(No symbol) [0x00007FF7A037D71C]\n\t(No symbol) [0x00007FF7A037E111]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF7A0761CDC+1102764]\n\t(No symbol) [0x00007FF7A03F25F6]\n\t(No symbol) [0x00007FF7A0483DAC]\n\t(No symbol) [0x00007FF7A047BDA8]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF7A0760C25+1098485]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7A0519E31+281249]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7A05145B4+258596]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7A05146EF+258911]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7A0508EC1+211761]\n\tBaseThreadInitThunk [0x00007FFC16B654E0+16]\n\tRtlUserThreadStart [0x00007FFC1884485B+43]", "trace": "self = <test_bankxyz.test_check.TestBankChecks object at 0x0000026793E6C0B0>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"032c5281dd6db2cc0eb11fe57cae7ded\")>\nselenium_action = <config.action.SeleniumAction object at 0x0000026793EE8B90>\nlogin_bank_manager = <function login_bank_manager.<locals>.login_bank_manager_function at 0x0000026793F04F40>\nopen_account = <function open_account.<locals>.open_account_function at 0x0000026793F051C0>\n\n    def test_successful_open_account_potter(self, browser, selenium_action, login_bank_manager, open_account):\n        \"\"\"Проверка открытия счета\"\"\"\n        login_bank_manager()\n>       open_account()\n\ntest_check.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_step.py:136: in open_account_function\n    allure.attach(browser.get_screenshot_as_png(), name=\"screenshot_open_account\", attachment_type=allure.attachment_type.PNG)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:832: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:843: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026793E9FA70>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Account created successfully with account Number :1016\"},\"error\":\"...508EC1+211761]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC16B654E0+16]\\\\n\\\\tRtlUserThreadStart [0x00007FFC1884485B+43]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Account created successfully with account Number :1016\nE           Message: unexpected alert open: {Alert text : Account created successfully with account Number :1016}\nE             (Session info: MicrosoftEdge=123.0.2420.81)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF7A058B7F2+63538]\nE           \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7A050F672+238306]\nE           \t(No symbol) [0x00007FF7A0343407]\nE           \t(No symbol) [0x00007FF7A03C2373]\nE           \t(No symbol) [0x00007FF7A03A8A83]\nE           \t(No symbol) [0x00007FF7A037E55E]\nE           \t(No symbol) [0x00007FF7A037D71C]\nE           \t(No symbol) [0x00007FF7A037E111]\nE           \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF7A0761CDC+1102764]\nE           \t(No symbol) [0x00007FF7A03F25F6]\nE           \t(No symbol) [0x00007FF7A0483DAC]\nE           \t(No symbol) [0x00007FF7A047BDA8]\nE           \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF7A0760C25+1098485]\nE           \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7A0519E31+281249]\nE           \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7A05145B4+258596]\nE           \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7A05146EF+258911]\nE           \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7A0508EC1+211761]\nE           \tBaseThreadInitThunk [0x00007FFC16B654E0+16]\nE           \tRtlUserThreadStart [0x00007FFC1884485B+43]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:228: UnexpectedAlertPresentException"}, "description": "Проверка открытия счета", "attachments": [{"name": "screenshot_login_bank_manager", "source": "e5873045-66db-4211-995f-ce14f1ebe841-attachment.png", "type": "image/png"}], "parameters": [{"name": "browser", "value": "'edge'"}], "start": 1712672709282, "stop": 1712672713165, "uuid": "e87eded8-da89-4bfb-a508-c370fc17e0dd", "historyId": "805561773f709d82d463128a3424da0a", "testCaseId": "d138147709229b7b297c8f62c174afba", "fullName": "test_check.TestBankChecks#test_successful_open_account_potter", "labels": [{"name": "suite", "value": "test_check"}, {"name": "subSuite", "value": "TestBankChecks"}, {"name": "host", "value": "LAPTOP-61QBU7S4"}, {"name": "thread", "value": "7236-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_check"}]}